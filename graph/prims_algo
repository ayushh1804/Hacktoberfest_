#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;

const int INF = INT_MAX;

// Define a structure to represent an edge
struct Edge {
    int to, weight;
};

// Define a custom comparison function for the priority queue
struct CompareEdge {
    bool operator()(const Edge& a, const Edge& b) {
        return a.weight > b.weight;
    }
};

// Function to find the minimum spanning tree using Prim's algorithm
void prim(vector<vector<Edge>>& graph, int V) {
    vector<int> key(V, INF); // Key values to track minimum weight
    vector<int> parent(V, -1); // Parent array to store the MST
    vector<bool> inMST(V, false); // To track whether a vertex is in the MST or not

    // Start with the first vertex
    key[0] = 0;

    priority_queue<Edge, vector<Edge>, CompareEdge> pq;
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().to;
        pq.pop();

        inMST[u] = true;

        for (Edge& edge : graph[u]) {
            int v = edge.to;
            int weight = edge.weight;

            if (!inMST[v] && weight < key[v]) {
                parent[v] = u;
                key[v] = weight;
                pq.push({v, key[v]});
            }
        }
    }

    // Print the minimum spanning tree
    for (int i = 1; i < V; i++) {
        cout << "Edge: " << parent[i] << " - " << i << " Weight: " << key[i] << endl;
    }
}

int main() {
    int V, E; // Number of vertices and edges
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<vector<Edge>> graph(V);

    cout << "Enter the edges (from, to, weight):" << endl;
    for (int i = 0; i < E; i++) {
        int from, to, weight;
        cin >> from >> to >> weight;
        graph[from].push_back({to, weight});
        graph[to].push_back({from, weight});
    }

    prim(graph, V);

    return 0;
}
